{"version":3,"sources":["APIhelper.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["API_Url","task","a","axios","post","newTodo","data","id","delete","message","payload","put","console","log","get","todos","createTodo","updateTodo","deleteTodo","getAllTodo","Card","props","completed","className","onClick","onDeleteTodo","style","color","onCompleteTodo","App","state","todo","handleChange","event","setState","target","value","find","_id","APIhelper","updatedTodo","updatedTodos","map","afterRemoveTodo","filter","alert","e","preventDefault","some","newCreatedTodo","getAllTodos","fetchAllTodos","type","this","onChange","i","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b87f1ab4.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\n const API_Url=\"http://localhost:5000/todos/\"\r\n\r\n //createTodo(task) - accepts a task and sends a post via axios.post to our API_URL and returns the newTodo.\r\n // Note: axios stores the response of our requests in a field called data.\r\n\r\n\r\n\r\nasync function createTodo(task){\r\nconst {data: newTodo}=await axios.post(API_Url,{task})\r\nreturn newTodo;\r\n}\r\n\r\nasync function deleteTodo(id){\r\n    const message = await axios.delete(`${API_Url}${id}`)\r\n    return message\r\n}\r\nasync function updateTodo(id,payload){\r\n    const {data:newTodo}=await axios.put(`${API_Url}${id}`,payload)\r\n    return newTodo\r\n}\r\n\r\nasync function getAllTodo(){\r\n    console.log(\"in getalltodo\")\r\n    const {data:todos}= await axios.get(API_Url)\r\n    console.log(todos)\r\n    return todos\r\n}\r\n\r\nexport default {createTodo,updateTodo,deleteTodo,getAllTodo}","import React from \"react\";\r\nimport \"./App.css\"\r\n\r\nfunction Card(props){\r\nconsole.log( props.completed)\r\n \r\n\r\nreturn(\r\n    // style={{backgroundColor:`rgb(245, 244, 219)`}} \r\n            <div className={ `card-container `} >\r\n            <span onClick={()=>props.onDeleteTodo(props.id)} style={{color:'red'}}>x</span>\r\n            <br/>\r\n            <div className={`${ props.completed ? \"completed\":\"\"}`}>\r\n                {props.task}  \r\n            </div>\r\n             <br/>\r\n             <br/>\r\n            <button onClick={()=>props.onCompleteTodo(props.id)}>Done</button>\r\n           </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport APIhelper from \"./APIhelper\"\nimport Card from \"./Card\"\nimport \"./App.css\"\n\n\nclass App extends React.Component{\n \n  state={\n    todo:\"\",\n    todos:\"\",\n  }\n\n   componentDidMount(){\n    const fetchAllTodos=async()=>{\n      const getAllTodos= await APIhelper.getAllTodo();\n      this.setState({todos:getAllTodos})\n     \n    } \n    fetchAllTodos();\n  }\n\n  handleChange=event=>{\n    this.setState({todo:event.target.value})\n    console.log(this.state.todo)\n  }\n  updateTodo=async(id)=>{\n    console.log(id);\n    const payload=\n   { completed:!this.state.todos.find(data=>data._id===id).completed}\n\n   const updatedTodo=await APIhelper.updateTodo(id,payload);\n\n   // this.setState({todo:event.target.value})\n  const updatedTodos=this.state.todos.map(todo=>(todo._id===id)?updatedTodo:todo)\n   this.setState({todos:updatedTodos}) \n    console.log(this.state.todos)\n    \n  }\n\n  \n  deleteTodo=async(id)=>{\n    try{\n      await APIhelper.deleteTodo(id)\n     const afterRemoveTodo=this.state.todos.filter(data => data._id !==id)\n     this.setState({todos:afterRemoveTodo})\n     console.log(this.state.todos)\n\n    }\n    catch(err){\n      alert(\"Id not found\")\n    }\n  }\n  \n\n  createTodo= async(e)=>{\n    e.preventDefault();\n      \n    const todos=this.state.todos;\n    const newTodo=this.state.todo;\n\n    console.log(newTodo)\n      \n     if(!newTodo){\n          alert(\"write something\")\n          return\n          }\n       \n    if(todos.some(({task})=>task===newTodo)){\n         alert(`${newTodo} is already exist`)\n         return\n         }\n \n        const newCreatedTodo=await APIhelper.createTodo(newTodo)\n        this.setState({todos:[...todos,newCreatedTodo]})\n \n\n  }\n  render(){\n   \n    return(\n      <div className=\"app-container\">\n        <h1>\n          TO DO App\n        </h1>\n        <div className=\"input-todo\">\n        <input type=\"text\" id=\"input-todo\" value={this.state.todo} onChange={this.handleChange}/>\n        <button onClick={this.createTodo}> Create new todo </button>\n        </div>\n\n        <br/>\n      \n        \n        {this.state.todos && this.state.todos.map((data,i)=>(\n          <Card\n          key={i}\n          id={data._id}\n          task={data.task}\n          completed={data.completed}\n          onDeleteTodo={id => this.deleteTodo(id)}\n          // onDeleteTodo={ function(retured data id){ this.deleteTodo(retured data id)}}\n          onCompleteTodo={id=>this.updateTodo(id)}\n\n          \n          />\n\n        ))}\n\n      </div>\n    )\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function App() {\n//   const [todos,setTodos]=useState([]);\n//   const [todo,setTodo]=useState(\"\");\n  \n//   useEffect(()=>{\n//     APIhelper.getAllTodo();\n  \n//   },[])\n\n  \n//   return (\n// <div>\n//   <input type=\"text\" id=\"input-todo\" value={todo} onChange={(event)=>setTodo(event.value)}/>\n//   <button>Add me</button>\n//   <label id=\"display\" value={todo}></label>\n//   <li>  \n//     <ul>\n\n//     </ul>\n//   </li> \n// </div>    \n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}